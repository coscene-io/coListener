name: build-apt.yml
on:
  workflow_dispatch:
  release:
  push:

jobs:
  build-deb:
    strategy:
      fail-fast: false
      matrix:
        include:
          - ros_distribution: noetic
            platform: amd64
            distro: focal
            label: ubuntu-latest
          - ros_distribution: noetic
            platform: arm64
            distro: focal
            label: [ linux-arm-64-8c-32g-300gb ]
          - ros_distribution: foxy
            platform: amd64
            distro: focal
            label: ubuntu-latest
          - ros_distribution: foxy
            platform: arm64
            distro: focal
            label: [ linux-arm-64-8c-32g-300gb ]
          - ros_distribution: humble
            platform: amd64
            distro: jammy
            label: ubuntu-latest
          - ros_distribution: humble
            platform: arm64
            distro: jammy
            label: [ linux-arm-64-8c-32g-300gb ]
          - ros_distribution: indigo
            platform: armhf
            distro: trusty
            label: [ linux-arm-64-8c-32g-300gb ]

    name: Build deb (ROS ${{ matrix.ros_distribution }} - ${{ matrix.platform }})
    runs-on: ${{ matrix.label }}
    container: 
      image: coscene/ros:${{ matrix.ros_distribution }}-${{ matrix.platform }}
    outputs:
      download_urls: ${{ steps.set_urls.outputs.urls }}
      matrix_result_noetic_amd64: ${{ steps.set_matrix_output.outputs.matrix_result_noetic_amd64 }}
      matrix_result_noetic_arm64: ${{ steps.set_matrix_output.outputs.matrix_result_noetic_arm64 }}
      matrix_result_foxy_amd64: ${{ steps.set_matrix_output.outputs.matrix_result_foxy_amd64 }}
      matrix_result_foxy_arm64: ${{ steps.set_matrix_output.outputs.matrix_result_foxy_arm64 }}
      matrix_result_humble_amd64: ${{ steps.set_matrix_output.outputs.matrix_result_humble_amd64 }}
      matrix_result_humble_arm64: ${{ steps.set_matrix_output.outputs.matrix_result_humble_arm64 }}
      matrix_result_indigo_armhf: ${{ steps.set_matrix_output.outputs.matrix_result_indigo_armhf }}

    steps:
      - name: Checkout code
        if: matrix.ros_distribution != 'indigo'
        uses: actions/checkout@v4

      - name: Checkout code (indigo)
        if: matrix.ros_distribution == 'indigo'
        run: |  
          git config --global url."https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf "https://github.com/"
  
          git clone https://github.com/${{ github.repository }}.git .
          git checkout ${{ github.sha || github.ref }}

      - name: Update version in package.xml
        if: github.event_name == 'release' || github.ref_type == 'tag'
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            TAG_VERSION=$(echo ${{ github.event.release.tag_name }} | sed 's/^v//')
          else
            TAG_VERSION=$(echo ${{ github.ref_name }} | sed 's/^v//')
          fi
          
          echo "检测到标签版本: $TAG_VERSION"
          sed -i "s/<version>[0-9]*\.[0-9]*\.[0-9]*<\/version>/<version>$TAG_VERSION<\/version>/" package.xml
          grep "<version>" package.xml

      - name: Generate debian/ directory and build .deb package
        run: |
          apt search ros-indigo-catkin
          rosdep update --include-eol-distros --rosdistro=${{ matrix.ros_distribution }}
          bloom-generate rosdebian --ros-distro ${{ matrix.ros_distribution }}
          DEB_BUILD_OPTIONS=nocheck dpkg-buildpackage -b -us -uc -a${{ matrix.platform }}
          mkdir /artifacts
          cp ../*.deb /artifacts/.
          ls /artifacts -lah

      - name: Install and Configure ossutil
        shell: bash
        run: |
          curl https://gosspublic.alicdn.com/ossutil/install.sh | bash
          ossutil config -e oss-cn-hangzhou.aliyuncs.com -i ${{ secrets.OSS_ARTIFACTS_ACCESS_KEY }} -k ${{ secrets.OSS_ARTIFACTS_ACCESS_SECRET }}
          
      - name: Upload latest files to oss
        id: set_urls
        shell: bash
        run: |
          urls=""          
          for file in /artifacts/*.deb; do
            filename=$(basename "$file")
            echo "Uploading file: $file as $filename"
            ossutil cp -f $file oss://coscene-download/colistener/dists/${{ matrix.distro }}/main/binary-${{ matrix.platform }}/$filename
            ossutil cp -f $file oss://coscene-download/colistener/dists/${{ matrix.distro }}/main/binary-${{ matrix.platform }}/ros-${{ matrix.ros_distribution }}-colistener_latest-0${{ matrix.distro }}_${{ matrix.platform }}.deb
            download_url="https://coscene-download.oss-cn-hangzhou.aliyuncs.com/colistener/dists/${{ matrix.distro }}/main/binary-${{ matrix.platform }}/$filename"
            
            urls="${urls}${{ matrix.platform }},${{ matrix.ros_distribution }},${{ matrix.distro }},$download_url;"
          done
          echo "urls=$urls" >> $GITHUB_OUTPUT
          echo "urls: $urls"
          
      - name: Set matrix output
        id: set_matrix_output
        run: |
          matrix_key="${{ matrix.ros_distribution }}_${{ matrix.platform }}"
          echo "matrix_result_${matrix_key}=${{ steps.set_urls.outputs.urls }}" >> $GITHUB_OUTPUT
          echo "set output: matrix_result_${matrix_key}=${{ steps.set_urls.outputs.urls }}"

  Download-list:
    needs: build-deb
    runs-on: ubuntu-latest
    steps:
      - name: Create workflow summary
        run: |
          echo "## All Download URLs" >> $GITHUB_STEP_SUMMARY
          echo "| Platform | ROS Distro | Ubuntu Distro | URL |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- | --- | --- |" >> $GITHUB_STEP_SUMMARY
          
          URLS=""
          URLS="${URLS}${{ needs.build-deb.outputs.matrix_result_noetic_amd64 }};"
          URLS="${URLS}${{ needs.build-deb.outputs.matrix_result_noetic_arm64 }};"
          URLS="${URLS}${{ needs.build-deb.outputs.matrix_result_foxy_amd64 }};"
          URLS="${URLS}${{ needs.build-deb.outputs.matrix_result_foxy_arm64 }};"
          URLS="${URLS}${{ needs.build-deb.outputs.matrix_result_humble_amd64 }};"
          URLS="${URLS}${{ needs.build-deb.outputs.matrix_result_humble_arm64 }};"
          URLS="${URLS}${{ needs.build-deb.outputs.matrix_result_indigo_armhf }};"
          
          IFS=';' read -ra URL_ARRAY <<< "$URLS"
          for url_item in "${URL_ARRAY[@]}"; do
            if [ -n "$url_item" ]; then
              IFS=',' read -ra ITEM <<< "$url_item"
              echo "| ${ITEM[0]} | ${ITEM[1]} | ${ITEM[2]} | [${ITEM[3]}](${ITEM[3]}) |" >> $GITHUB_STEP_SUMMARY
            fi
          done
